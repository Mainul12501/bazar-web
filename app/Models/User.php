<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\helper\ViewHelper;
use App\Models\Backend\Order\Order;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Jetstream\HasProfilePhoto;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens;

    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory;
    use HasProfilePhoto;
    use Notifiable;
    use TwoFactorAuthenticatable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
//        'email',
        'mobile',
        'password',
        'fcm_token',
        'role',
        'area_id',
        'road_number',
        'building_address',
        'floor',
        'temp_otp',
        'last_login_otp',
        'profile_photo',
        'device_token',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
        'two_factor_recovery_codes',
        'two_factor_secret',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array<int, string>
     */
    protected $appends = [
//        'profile_photo_url',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($user) {
//            if (file_exists($user->profile_photo_url))
//            {
//                unlink($user->profile_photo_url);
//            }
            if (count($user->orders) > 0)
            {
                $user->orders->each->delete();
            }
        });
    }

    public static function createOrUpdateUser($request, $id = null)
    {
        return User::updateOrCreate(['id' => $id], [
            'name'    => $request->name,
            'mobile'  => $request->mobile,
            'password'  => isset($id) ? (isset($request->password) ? Hash::make($request->password) : User::find($id)->password) : Hash::make($request->password),
            'fcm_token'  => $request->fcm_token,
//            'role'  => ViewHelper::authCheck() && ViewHelper::loggedUser()->role == 'admin' ? 'admin' : (count(User::where('role', 'admin')->get()) > 0 ? 'user' : 'admin'),
            'role'  => $request->exist_role == 'admin' ? 'admin' : (count(User::where('role', 'admin')->get()) > 0 ? 'user' : 'admin'),
            'area_id'  => $request->area_id,
            'road_number'  => $request->road_number,
            'building_address'  => $request->building_address,
            'floor'  => $request->floor,
            'temp_otp'  => $request->temp_otp,
            'last_login_otp'  => session('otp'),
            'profile_photo' => imageUpload($request->file('profile_photo'), 'profile-image','user-',150,150, isset($id) ? User::find($id)->profile_photo : '')
        ]);
    }

    public function area()
    {
        return $this->belongsTo(Area::class)->with('district');
    }
    public function orders()
    {
        return $this->hasMany(Order::class);
    }
}
